---
title: "Ggplot Practice"
author: "J"
format: html
---

Attaching packages
```{r}
library(tidyverse)
library(here)
library(janitor)
library(lubridate)
library(paletteer)
```

## Gglpot basics

Read in Lizard data
```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

### The essentials
- data
- aesthetics 
- geometry

```{r}
# Ggplot essentials, 3 ways

# First
# Data and aesthetics stay consistent throughout plot
ggplot(data = lizards,
       aes(x = total_length, y = weight)) + # (1 and 2)
  geom_point() # 3

# Second
# Data stays consistent throughout plot
ggplot(data = lizards) + 
  geom_point(aes(x = total_length, y = weight))

# Third
# Nothing stays consistent
ggplot(data = lizards) +
  geom_point(data = lizards,
             aes(x = total_length, y = weight))
```

## Swap out geometries
```{r}
# Bad examples
ggplot(data = lizards,
       aes(x = total_length, y = weight)) + # (1 and 2)
  geom_line()
```

Some geometry types only need one axis
```{r}
ggplot(data = lizards, aes(total_length)) +
  geom_histogram()
```

Jitterplots usually are best with one categorical and one continuous variable 
```{r}
ggplot(data = lizards,
       aes(x = weight, y = common_name)) +
  geom_jitter()
```

## Aesthetic mapping
### Updating based on a constant value
Don't need to use the `aes()` function!

```{r}
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "#709255",
                 fill = "#172815",
                 alpha = 0.75,
                 linetype = "dotted")
```

## Updating aesthetics based on variables
In that case, we need to use the `aes()` function
```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(colour = common_name),
             alpha = 0.5)
```

# Themes
## Update axis labels
```{r}
ggplot(data = lizards, aes(x = weight, y = site)) +
  geom_jitter(aes(colour = common_name)) +
  theme_minimal() +
  labs(x = "Weight (g)",
       y = "Study Site",
       title = "Lizard weights across sites at Jornada",
       color = "Species")
```

## Reorder data
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts,
       aes(x = n, y = fct_reorder(common_name, n))) +
  geom_col(aes(fill = common_name)) +
  labs(x = "Individuals (n)",
       y = "Species common name",
       color = "Species")
```

## Advanced ggplot customization
```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500),
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0,
                                  to = 70,
                                  by = 10),
                     limits = c(0, 70)) +
  labs(x = "Total length (mm)",
       y = "Weight (grams)") +
  theme_minimal()
```

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_log10()
```

```{r}
# counting up the number of lizards caught per day
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts,
       aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("%Y"))
```

### Customization of aesthetics with `scale_` functions
```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(colour = weight)) +
  scale_color_gradient(low = "red", high = "navy")

# color gradient with more than 2 colors
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(colour = weight)) +
  scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))

# Create a gradient of color bins
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(colour = weight)) +
  scale_color_steps(low = "red", high = "navy",
                       breaks = seq(0, 80, by = 5))
```

```{r}
ggplot(data = lizards,
       aes(x = common_name, y = total_length)) +
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) +
  coord_flip()
```

```{r}
# Ordering spaces based on median length
lizards_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name,
                                   total_length, .fun = median))

ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_fill_paletteer_d("MoMAColors::Abbott") +
  labs(x = "Total Length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())
```

# Patchwork to create compound figures
```{r}
library(patchwork)

lizards_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name,
                                   total_length, .fun = median))

p1 <- ggplot(data = lizards_mean,
       aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) +
  scale_fill_paletteer_d("MoMAColors::Abbott") +
  labs(x = "Total Length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())

p2 <- ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(colour = weight)) +
  scale_color_steps(low = "red", high = "navy",
                       breaks = seq(0, 80, by = 5))
```

```{r}
library(patchwork)
# "|" puts plots next to each other
(p1 | p2) & theme_minimal()

# "/" puts plots on top of each other
(p1 / p2 / p2 / p2) & theme_minimal()

# Combinations of next to and on top of each other
p3 <- ((p1 | p2) / p2) & theme_minimal()

ggsave("test.png", p3)
```

